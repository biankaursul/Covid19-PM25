curve(age.seq, prob.model.age[,1])
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
lines(age.seq, prob.model.age[,1])
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1])
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1ï¼Œmain = "Probability of Outcome 1", xlab ="age",ylab = "probability")
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcome 1", xlab ="age",ylab = "probability")
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcome 1", xlab ="age",ylab = "probability")
plot(age.seq, prob.model.age[,2], cex = 0.1, main = "Probability of Outcome 2", xlab ="age",ylab = "probability")
plot(age.seq, prob.model.age[,3], cex = 0.1, main = "Probability of Outcome 3", xlab ="age",ylab = "probability")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcome 1", xlab ="age",ylab = "probability")
plot(age.seq, prob.model.age[,2], cex = 0.1, main = "Probability of Outcome 2", xlab ="age",ylab = "probability")
plot(age.seq, prob.model.age[,3], cex = 0.1, main = "Probability of Outcome 3", xlab ="age",ylab = "probability")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcome 1", xlab ="age",ylab = "probability")
lines(age.seq, prob.model.age[,2], cex = 0.1)#, main = "Probability of Outcome 2", xlab ="age",ylab = "probability")
lines(age.seq, prob.model.age[,3], cex = 0.1)#, main = "Probability of Outcome 3", xlab ="age",ylab = "probability")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcome 1", xlab ="age",ylab = "probability")
plot(age.seq, prob.model.age[,2], cex = 0.1, main = "Probability of Outcome 2", xlab ="age",ylab = "probability", add = TRUE)
plot(age.seq, prob.model.age[,3], cex = 0.1, main = "Probability of Outcome 3", xlab ="age",ylab = "probability")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcome 1", xlab ="age",ylab = "probability")
points(age.seq, prob.model.age[,2], cex = 0.1, main = "Probability of Outcome 2", xlab ="age",ylab = "probability", add = TRUE)
points(age.seq, prob.model.age[,3], cex = 0.1, main = "Probability of Outcome 3", xlab ="age",ylab = "probability")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability")
points(age.seq, prob.model.age[,2], cex = 0.1, color = "green")
points(age.seq, prob.model.age[,3], cex = 0.1, color = "orange")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "green")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
legend("topright",c("Outcome 1", "Outcome 2", "Outcome 3"), col = c("dodgerblue","lightgreen","orange"), lwd = 1)
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
legend("topright",c("Outcome 1", "Outcome 2", "Outcome 3"), col = c("dodgerblue","lightgreen","orange"), lwd = 1, cex = 0.5)
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
legend("right",c("Outcome 1", "Outcome 2", "Outcome 3"), col = c("dodgerblue","lightgreen","orange"), lwd = 1, cex = 0.5)
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
legend("right",c("Outcome 1", "Outcome 2", "Outcome 3"), col = c("dodgerblue","lightgreen","orange"), lwd = 1, cex = 0.7)
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.1, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.1, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.1, col = "orange")
legend("right",c("Outcome 1", "Outcome 2", "Outcome 3"), col = c("dodgerblue","lightgreen","orange"), lwd = 1.5, cex = 0.7)
summ.MNfit(model.age)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.05, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.05, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.05, col = "orange")
legend("right",c("Outcome 1", "Outcome 2", "Outcome 3"), col = c("dodgerblue","lightgreen","orange"), lwd = 1.5, cex = 0.7)
summ.MNfit(model.age)
print("The relative risk ratio comparing outcome 2 to outcome 1 is ",exp(0.026*10),"times ")
cat("The relative risk ratio comparing outcome 2 to outcome 1 is ",exp(0.026*10),"times ")
summ.MNfit(model.age)
confint(model.age)
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger, with a confidence interval", c(exp(0.01326*10), exp(0.0383*10)), ".")
cat("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is",exp(0.117*10),"times this risk ratio for a population that is 10 years younger.")
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger.")
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger, with a confidence interval", c(exp(0.01326*10), exp(0.0383*10)), ". \n")
cat("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is",exp(0.117*10),"times this risk ratio for a population that is 10 years younger.")
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger.")
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger, with a confidence interval (", c(exp(0.01326*10), exp(0.0383*10)), "). \n")
cat("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is",exp(0.117*10),"times this risk ratio for a population that is 10 years younger.")
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger.")
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
cat("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is",exp(0.117*10),"times this risk ratio for a population that is 10 years younger.")
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger.")
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95% confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
cat("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is",exp(0.117*10),"times this risk ratio for a population that is 10 years younger.")
cat("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is",exp(0.026*10),"times this risk ratio for a population that is 10 years younger.")
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10), exp(0.1073*10), exp(0.12574*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 2 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10)/exp(0.026*10),exp(0.1073*10)/exp(0.0383*10), exp(0.12574*10)/exp(0.01326*10))
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10), exp(0.1073*10), exp(0.12574*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 2 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10)/exp(0.026*10),exp(0.1073*10)/exp(0.0383*10), exp(0.12574*10)/exp(0.01326*10))
fitted(model.sex)
table(fitted(model.sex))
fitted(model.sex)
fitted(model.sex)[framingham$sex == 1]
fitted(model.sex)[framingham$sex == 1,]
fitted(model.sex)[framingham$sex == 0,]
fitted(model.sex)[framingham$sex == 1,]
# Data cleaning
library(haven)
framingham = read_dta("Data and Programs/framingham.dta")
framingham = framingham[framingham$prevchd == 0,]
framingham$outcome = (framingham$death == 0 & framingham$anychd == 0)*1 + (framingham$death == 0 & framingham$anychd == 1)*2 + (framingham$death == 1)*3
framingham$prevchd = NULL
framingham$sex = framingham$sex -1
model.sex = multinom(outcome~sex, data = framingham)
model.age = multinom(outcome~age, data = framingham)
model.age.sex = multinom(outcome~age+sex, data = framingham)
model.age.sex.int = multinom(outcome~age+sex+age*sex, data = framingham)
fitted(model.sex)[framingham$sex == 1,]
fitted(model.sex)[framingham$sex == 1,][1,]
fitted(model.sex)[framingham$sex == 1,][1,]
fitted(model.sex)[framingham$sex == 0,][1,]
female_pred = fitted(model.sex)[framingham$sex == 1,][1,]
male_pred = fitted(model.sex)[framingham$sex == 0,][1,]
rbind(female_ored,male_pred)
female_pred = fitted(model.sex)[framingham$sex == 1,][1,]
male_pred = fitted(model.sex)[framingham$sex == 0,][1,]
rbind(female_pred,male_pred)
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table = rbind(female_pred,male_pred)
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(female_pred,male_pred)
outcome_sex_table = table(framingham$outcome, framingham$sex)
outcome_sex_table
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(female_pred,male_pred)
outcome_sex_table = table(framingham$sex, framingham$outcome)
outcome_sex_table
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(female_pred,male_pred)
outcome_sex_table = prop.table(framingham$sex, framingham$outcome)
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(female_pred,male_pred)
outcome_sex_table = table(framingham$sex, framingham$outcome)
outcome_sex_table_prop = prop.table(outcome_sex_table, 1)
fitted_prob_table
outcome_sex_table_prop
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(male_pred,female_pred)
outcome_sex_table = table(framingham$sex, framingham$outcome)
outcome_sex_table_prop = prop.table(outcome_sex_table, 1)
fitted_prob_table
outcome_sex_table_prop
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(male_pred,female_pred)
outcome_sex_table = table(framingham$sex, framingham$outcome)
outcome_sex_table_prop = prop.table(outcome_sex_table, 1)
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(male_pred,female_pred)
outcome_sex_table = table(framingham$sex, framingham$outcome)
outcome_sex_table_prop = prop.table(outcome_sex_table, 1)
fitted_prob_table_sex
outcome_sex_table_prop
summ.MNfit(model.sex)
fitted_prob_table_sex
outcome_sex_table_prop
summ.MNfit(model.sex)
outcome_sex_table
summ.MNfit(model.sex)
outcome_sex_table
summ.MNfit(model.sex)
outcome_sex_table_prop
RRR_21 = (0.12362637/0.46978022)/(0.09876033/0.62603306)
RRR_21 = (0.12362637/0.46978022)/(0.09876033/0.62603306)
RRR_21
RRR_21 = (0.09876033/0.62603306)/(0.12362637/0.46978022)
RRR_21
RRR_21 = (0.09876033/0.62603306)/(0.12362637/0.46978022)
RRR_21
RRR_31 = (0.27520661/0.62603306)/(0.40659341/0.46978022)
RRR_31
anova(model.age.sex, model.age.sex.int)
anova(model.age.sex, model.age.sex.int, test = "Chisq")
anova(model.age.sex, model.age.sex.int, test = "Chisq")
library(VGAM)
install.packages("VGAM"")
install.packages("VGAM"")
install.packages("VGAM")
install.packages("VGAM")
library(VGAM)
ord.age = vglm(outcome~age,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.sex = vglm(outcome~sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.age.sex = vglm(outcome~age + sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.age.sex.int = vglm(outcome~age + sex + age*sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
install.packages("stats4")
install.packages("stats4")
install.packages("stats4")
install.packages("stats4")
install.packages("stats4")
install.packages("stats4")
library(stats4)
knitr::opts_chunk$set(echo = TRUE)
library(VGAM)
library(stats4)
library(splines)
ord.age = vglm(outcome~age,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.sex = vglm(outcome~sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.age.sex = vglm(outcome~age + sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.age.sex.int = vglm(outcome~age + sex + age*sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
library(splines)
library(VGAM)
library(stats4)
library(splines)
ord.age = vglm(outcome~age,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.sex = vglm(outcome~sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.age.sex = vglm(outcome~age + sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
ord.age.sex.int = vglm(outcome~age + sex + age*sex,cumulative(parallel=TRUE, reverse=FALSE), data = framingham)
summ.MNfit(ord.age)
summary(ord.age)
summary(ord.age)
library(VGAM)
library(stats4)
library(splines)
ord.age = vglm(outcome~age,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
ord.sex = vglm(outcome~sex,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
ord.age.sex = vglm(outcome~age + sex,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
ord.age.sex.int = vglm(outcome~age + sex + age*sex,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
summary(ord.age)
printf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %f", exp(-5.713239))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %f", exp(-5.713239))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %f", exp(0.099351))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %f", exp(0.099351*10))
summary(ord.age)
confint(ord.age)
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %.3f with 95%% confidence intervale of (%.3f,%.3f)", exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %.3f with 95%% confidence intervale of (%.3f,%.3f).", exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 2 and 3(combined) vs. outcome 1 is also %.3f with 95%% confidence intervale of (%.3f,%.3f).", exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %.3f with 95%% confidence intervale of (%.3f,%.3f).", exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 2 and 3(combined) vs. outcome 1 is also %.3f with 95%% confidence intervale of (%.3f,%.3f).", exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
framingham$outcome1 = 1*(framingham$outcome == 3)
framingham$outcome2 = 1*(framingham$outcome == 1 | framingham$outcome == 2)
framingham$outcome1 = 1*(framingham$outcome == 3)
framingham$outcome2 = 1*(framingham$outcome == 1 | framingham$outcome == 2)
log.outcome1 = glm(outcome1~age, family = binomial(), data = framingham)
log.outcome2 = glm(outcome2~age, family = binomial(), data = framingham)
summary(log.outcome1)
summary(log.outcome2)
framingham$outcome1 = 1*(framingham$outcome == 3)
framingham$outcome2 = 1*(framingham$outcome == 1 | framingham$outcome == 2)
log.outcome1 = glm(outcome1~age, family = binomial(), data = framingham)
log.outcome2 = glm(outcome2~age, family = binomial(), data = framingham)
summary(log.outcome1)
summary(log.outcome2)
View(framingham)
framingham$outcome1 = 1*(framingham$outcome == 3)
framingham$outcome2 = 1*(framingham$outcome == 2 | framingham$outcome == 3)
log.outcome1 = glm(outcome1~age, family = binomial(), data = framingham)
log.outcome2 = glm(outcome2~age, family = binomial(), data = framingham)
summary(log.outcome1)
summary(log.outcome2)
confint(log.outcome1)
confint(log.outcome2)
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex)
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex)
tab1
fitted_prob_table_sex
outcome_sex_table_prop
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex, row.names("outcome"))
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex, row.names("class 1 and 2","class 3"))
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex, row.names("class 1 and 2"))
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex)
tab2 = table(framingham$outcome2, framingham$sex)
tab1
tab2
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex)
tab2 = table(framingham$outcome2, framingham$sex)
tab1
tab2
summary(ord.sex)
# model with sex alone
tab1 = table(framingham$outcome1, framingham$sex)
tab2 = table(framingham$outcome2, framingham$sex)
tab1
tab2
OR_3_12 = (740/1080)/(666/1754)
OR_3_12
OR_3_12 = (740/1080)/(666/1754)
1/OR_3_12
OR_12_3 = (666/1754)/(740/1080)
OR_12_3
OR_1_23 = (965/855)/(905/1515)
OR_1_23
OR_12_3 = (666/1754)/(740/1080)
OR_12_3
OR_1_23 = (905/1515)/(965/855)
OR_1_23
OR_12_3 = (666/1754)/(740/1080)
OR_12_3
OR_1_23 = (905/1515)/(965/855)
OR_1_23
anova(ord.age.sex, ord.age.sex.int)
pchisq(deviance(ord.age.sex.int)-deviance(ord.age.sex),
df=df.residual(ord.age.sex.int)-df.residual(ord.age.sex),lower.tail=F)
pchisq(deviance(ord.age.sex.int)-deviance(ord.age.sex), df = df.residual(ord.age.sex.int)-df.residual(ord.age.sex),lower.tail=F)
pchisq(deviance(ord.age.sex)-deviance(ord.age.sex.int), df = df.residual(ord.age.sex)-df.residual(ord.age.sex.int),lower.tail=F)
pchisq(deviance(ord.age.sex)-deviance(ord.age.sex.int), df = df.residual(ord.age.sex)-df.residual(ord.age.sex.int),lower.tail=F)
pchisq(deviance(ord.age.sex)-deviance(ord.age.sex.int), df = df.residual(ord.age.sex)-df.residual(ord.age.sex.int),lower.tail=F)
summary(ord.age.sex.int)
ord.po = vglm(outcome~age+sex, family = cumulative(parallel = TRUE,
reverse = TRUE), data = framingham)
ord.npo = vglm(outcome~age+sex,family = cumulative(parallel = FALSE,
reverse = TRUE), data = framingham)
pchisq(deviance(ord.po)- deviance(ord.npo), df = df.residual(ord.po) - df.residual(ord.npo), lower.tail = F)
ord.po = vglm(outcome~age+sex, family = cumulative(parallel = TRUE,
reverse = TRUE), data = framingham)
ord.npo = vglm(outcome~age+sex,family = cumulative(parallel = FALSE,
reverse = TRUE), data = framingham)
pchisq(deviance(ord.po)- deviance(ord.npo), df = df.residual(ord.po) - df.residual(ord.npo), lower.tail = F)
vcov(model.age)
summ.MNfit(model.age)
# Data cleaning
library(haven)
framingham = read_dta("Data and Programs/framingham.dta")
framingham = framingham[framingham$prevchd == 0,]
framingham$outcome = (framingham$death == 0 & framingham$anychd == 0)*1 + (framingham$death == 0 & framingham$anychd == 1)*2 + (framingham$death == 1)*3
framingham$prevchd = NULL
framingham$sex = framingham$sex -1
summ.MNfit <- function(fit, digits=3){
s <- summary(fit)
for(i in 2:length(fit$lev))
{
##
cat("\nLevel", fit$lev[i], "vs. Level", fit$lev[1], "\n")
##
betaHat <- s$coefficients[(i-1),]
se <- s$standard.errors[(i-1),]
zStat <- betaHat / se
pval <- 2 * pnorm(abs(zStat), lower.tail=FALSE)
##
RRR <- exp(betaHat)
RRR.lo <- exp(betaHat - qnorm(0.975)*se)
RRR.up <- exp(betaHat + qnorm(0.975)*se)
##
results <- cbind(betaHat, se, pval, RRR, RRR.lo, RRR.up)
print(round(results, digits=digits))
}
}
model.sex = multinom(outcome~sex, data = framingham)
library(foreign)
library(dplyr)
install.packages("dplyr")
library(foreign)
library(dplyr)
model.sex = multinom(outcome~sex, data = framingham)
library(foreign)
library(dplyr)
library(nnet)
model.sex = multinom(outcome~sex, data = framingham)
model.age = multinom(outcome~age, data = framingham)
model.age.sex = multinom(outcome~age+sex, data = framingham)
model.age.sex.int = multinom(outcome~age+sex+age*sex, data = framingham)
age.seq = seq(0,80,0.01)
prob.model.age = predict(model.age,list(age = age.seq), type = 'probs')
par(mfrow = c(1,1))
plot(age.seq, prob.model.age[,1], cex = 0.05, main = "Probability of Outcomes", xlab ="age",ylab = "probability", col = "dodgerblue")
points(age.seq, prob.model.age[,2], cex = 0.05, col = "lightgreen")
points(age.seq, prob.model.age[,3], cex = 0.05, col = "orange")
legend("right",c("Outcome 1", "Outcome 2", "Outcome 3"), col = c("dodgerblue","lightgreen","orange"), lwd = 1.5, cex = 0.7)
summ.MNfit(model.age)
confint(model.age)
vcov(model.age)
beta3_2_std = sqrt(4.080459e-05 + 2.206629e-05 - 2* 7.955112e-06)
beta3_2_std = sqrt(4.080459e-05 + 2.206629e-05 - 2* 7.955112e-06)
beta3_2_std
beta3_2_std = sqrt(4.080459e-05 + 2.206629e-05 - 2* 7.955112e-06)
beta3_2_std
exp(0.117*10 - 0.026*10- 1.96 * beta3_2_std *10)
exp(0.117*10 - 0.026*10+ 1.96 * beta3_2_std *10)
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10), exp(0.1073*10), exp(0.12574*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 2 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10)/exp(0.026*10),exp(0.1073*10)/exp(0.0383*10), exp(0.12574*10)/exp(0.01326*10))
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10), exp(0.1073*10), exp(0.12574*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 2 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10)/exp(0.026*10),lower, upper)
beta3_2_std = sqrt(4.080459e-05 + 2.206629e-05 - 2* 7.955112e-06)
beta3_2_std
lower = exp(0.117*10 - 0.026*10- 1.96 * beta3_2_std *10)
upper = exp(0.117*10 - 0.026*10+ 1.96 * beta3_2_std *10)
sprintf("The estimated relative risk ratio of having outcome 2 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.026*10), exp(0.01326*10), exp(0.0383*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 1 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10), exp(0.1073*10), exp(0.12574*10))
sprintf("The estimated relative risk ratio of having outcome 3 to having outcome 2 for a population is %.3f times this risk ratio for a population that is 10 years younger, with a 95%% confidence interval (%.3f,%.3f).",exp(0.117*10)/exp(0.026*10),lower, upper)
female = fitted(model.sex)[framingham$sex == 1,][1,]
male = fitted(model.sex)[framingham$sex == 0,][1,]
fitted_prob_table_sex = rbind(male_pred,female_pred)
outcome_sex_table = table(framingham$sex, framingham$outcome)
outcome_sex_table_prop = prop.table(outcome_sex_table, 1)
fitted_prob_table_sex
outcome_sex_table_prop
summ.MNfit(model.sex)
outcome_sex_table_prop
RRR_21 = (0.09876033/0.62603306)/(0.12362637/0.46978022)
RRR_21
RRR_31 = (0.27520661/0.62603306)/(0.40659341/0.46978022)
RRR_31
anova(model.age.sex, model.age.sex.int, test = "Chisq")
library(VGAM)
library(stats4)
library(splines)
ord.age = vglm(outcome~age,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
ord.sex = vglm(outcome~sex,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
ord.age.sex = vglm(outcome~age + sex,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
ord.age.sex.int = vglm(outcome~age + sex + age*sex,cumulative(parallel=TRUE, reverse=TRUE), data = framingham)
# model with age alone
summary(ord.age)
confint(ord.age)
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %.3f with 95%% confidence intervale of (%.3f,%.3f).", exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 2 and 3(combined) vs. outcome 1 is also %.3f with 95%% confidence intervale of (%.3f,%.3f).", exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
framingham$outcome1 = 1*(framingham$outcome == 3)
framingham$outcome2 = 1*(framingham$outcome == 2 | framingham$outcome == 3)
log.outcome1 = glm(outcome1~age, family = binomial(), data = framingham)
log.outcome2 = glm(outcome2~age, family = binomial(), data = framingham)
summary(log.outcome1)
summary(log.outcome2)
framingham$outcome1 = 1*(framingham$outcome == 3)
framingham$outcome2 = 1*(framingham$outcome == 2 | framingham$outcome == 3)
log.outcome1 = glm(outcome1~age, family = binomial(), data = framingham)
log.outcome2 = glm(outcome2~age, family = binomial(), data = framingham)
summary(log.outcome1)
summary(log.outcome2)
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs.
outcome 1 and 2 (combined) is %.3f with 95%% confidence intervale of (%.3f,%.3f).",
exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 2 and 3(combined) vs.
outcome 1 is also %.3f with 95%% confidence intervale of (%.3f,%.3f).",
exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 3 vs. outcome 1 and 2 (combined) is %.3f with 95%% confidence intervale of (%.3f,%.3f).",
exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
sprintf("The estimated odds ratio  for the effect of 10 years comparing outcome 2 and 3(combined) vs. outcome 1 is also %.3f with 95%% confidence intervale of (%.3f,%.3f).",
exp(0.099351*10), exp(0.0915555*10), exp(0.1071468*10))
