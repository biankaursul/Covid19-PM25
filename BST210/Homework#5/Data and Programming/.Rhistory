lines(xage,yage)
pred.age.cont = predict(age.cont.mortality, list(age = framingham$age), "response")
range(framingham$age)
xage = seq(0,70,0.01)
yage = predict(age.cont.mortality, list(age = xage), "response")
range(framingham$agecat)
xagecat = c(1,2,3,4)
yagecat = predict(age.cat.mortality, list(agecat = xagecat), "response")
plot(framingham$death~framingham$agecat, pch = 20)
lines(xagecat,yagecat)
plot(framingham$death~framingham$age, pch = 20)
lines(xage,yage)
pred.age.cont = predict(age.cont.mortality, list(age = framingham$age), "response")
pred.age.cont
anova(null.mortality, age.cont.mortality, test = "Chisq")
anova(null.mortality, age.cat.mortality, test = "Chisq")
AIC(age.cont.mortality)
anova(null.mortality, age.cont.mortality, test = "Chisq")
anova(null.mortality, age.cat.mortality, test = "Chisq")
AIC(age.cont.mortality)
AIC(age.cat.mortality)
anova(null.mortality, age.cont.mortality, test = "Chisq")
anova(null.mortality, age.cat.mortality, test = "Chisq")
AIC(age.cont.mortality)
AIC(age.cat.mortality)
pR2(age.cont.mortality)
library(pscl)
install.packages("pscl")
library(pscl)
anova(null.mortality, age.cont.mortality, test = "Chisq")
anova(null.mortality, age.cat.mortality, test = "Chisq")
AIC(age.cont.mortality)
AIC(age.cat.mortality)
pR2(age.cont.mortality)
pR2(age.cat.mortality)
bmi.agecat.mortality = glm(death~bmi + agecat, family=binomial, data = framingham)
bmi.agecatint.mortality = glm(death ~ bmi + I(agecat*bmi), family = binomial, data = framingham)
summary(bmi.mortality)
summary(bmi.agecat.mortality)
summary(bmi.agecatint.mortality)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
View(framingham)
framingham = na.omit(framingham)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
View(framingham)
framingham = na.omit(framingham)
# Calculate odds ratio for the effect of a 5-unit change in bmi
odds_ratio = exp(5* 0.054564)
cat("The odds ratio for the effect of a 5-unit change in bmi is",odds_ratio, '\n')
lower_bound = exp(5* (0.054564 - 1.96*0.008914))
upper_bound = exp(5* (0.054564 + 1.96*0.008914))
sprintf("The 95 percent CI of OR for the effect of a 5-unit change in bmi is (%f, %f).", lower_bound, upper_bound)
bmi_range = range(framingham$bmi)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
# fit logistic regression model - linear and quadratic bmi
bmi.quad.mortality = glm(death ~ bmi + I(bmi^2), family = binomial, data = framingham)
summary(bmi.quad.mortality)
anova(bmi.mortality, bmi.quad.mortality, test = 'Chisq')
# fit logistic regression model -  linear
bmi.mortality = glm(death~bmi, family = binomial(), data = framingham)
summary(bmi.mortality)
anova(bmi.mortality, bmi.quad.mortality, test = 'Chisq')
bmi_range = range(framingham$bmi)
bmi_range = range(framingham$bmi)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20)
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("topright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.6)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100))
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("topright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.6)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,120))
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("topright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.6)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100))
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("topright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.6)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100))
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("lowerright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.6)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100))
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.6)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100))
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.7)
bmi_range = range(framingham$bmi)
bmi_range = range(framingham$bmi)
bmi_range
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,60), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.7)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "blue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.7)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "dodgerblue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "blue") ,lty = "solid", cex = 0.7)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "dodgerblue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "dodgerblue") ,lty = "solid", cex = 0.7)
bmi.agecat.mortality = glm(death~bmi + agecat, family=binomial, data = framingham)
bmi.agecatint.mortality = glm(death ~ bmi + agecat*bmi, family = binomial, data = framingham)
summary(bmi.mortality)
summary(bmi.agecat.mortality)
summary(bmi.agecatint.mortality)
# check if sex is an effect modifier
bmi.sexint.mortality = glm(death~bmi+bmi*sex, family = binomial, data = framingham)
summary(bmi.sexint.mortality)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
View(framingham)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
View(framingham)
is.na(framingham)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
View(framingham)
framingham['sex','bmi']
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
framingham['sex','bmi']
View(framingham)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
framingham[c('sex', 'bmi')]
View(framingham)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
framingham = na.omit(framingham[c('sex', 'bmi', 'age','agecat','death')])
View(framingham)
# fit logistic regression model -  linear
bmi.mortality = glm(death~bmi, family = binomial(), data = framingham)
summary(bmi.mortality)
# Calculate odds ratio for the effect of a 5-unit change in bmi
odds_ratio = exp(5* 0.050932)
cat("The odds ratio for the effect of a 5-unit change in bmi is",odds_ratio, '\n')
lower_bound = exp(5* (0.050932 - 1.96*0.007686))
upper_bound = exp(5* (0.050932 + 1.96*0.007686))
sprintf("The 95 percent CI of OR for the effect of a 5-unit change in bmi is (%f, %f).", lower_bound, upper_bound)
# fit logistic regression model - linear and quadratic bmi
bmi.quad.mortality = glm(death ~ bmi + I(bmi^2), family = binomial, data = framingham)
summary(bmi.quad.mortality)
# fit logistic regression model - linear and quadratic bmi
bmi.quad.mortality = glm(death ~ bmi + I(bmi^2), family = binomial, data = framingham)
summary(bmi.quad.mortality)
anova(bmi.mortality, bmi.quad.mortality, test = 'Chisq')
anova(bmi.mortality, bmi.quad.mortality, test = 'Chisq')
bmi_range = range(framingham$bmi)
bmi_range
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "dodgerblue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "dodgerblue") ,lty = "solid", cex = 0.7)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,100), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "dodgerblue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "dodgerblue") ,lty = "solid", cex = 0.7)
odds = function(bmi){
log_odds = -1.6476413 + 0.0287998 * bmi + 0.0003947 * bmi^2
odds = exp(log_odds)
return (odds)
}
oddsratio1 = odds(25)/odds(20)
oddsratio2 = odds(35)/odds(30)
oddsratio1
oddsratio2
cat("The odds ratio for a 5-unit increase in BMI (comparing 25 to 20) is:", oddsratio1)
cat("The odds ratio for a 5-unit increase in BMI (comparing 35 to 30) is:", oddsratio2)
cat("The odds ratio for a 5-unit increase in BMI (comparing 25 to 20) is:", oddsratio1, '\n')
cat("The odds ratio for a 5-unit increase in BMI (comparing 35 to 30) is:", oddsratio2)
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,60), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "dodgerblue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "dodgerblue") ,lty = "solid", cex = 0.7)
# Two sample t-test comparing the average bmi of males and females
t.test(bmi~sex, data = framingham)
boxplot(bmi~sex, data = framingham)
# check if sex is a confounder
bmi.sex.mortality = glm(death~ bmi + sex, family = binomial, data = framingham)
summary(bmi.sex.mortality)
summary(bmi.mortality)
# check if sex is a confounder
bmi.sex.mortality = glm(death~ bmi + sex, family = binomial, data = framingham)
summary(bmi.sex.mortality)
summary(bmi.mortality)
# check if sex is a confounder
framingham$sex = framingham$sex -1
View(framingham)
bmi.sex.mortality = glm(death~ bmi + sex, family = binomial, data = framingham)
summary(bmi.sex.mortality)
summary(bmi.mortality)
# check if sex is a confounder
framingham$sex = framingham$sex -1
bmi.sex.mortality = glm(death~ bmi + sex, family = binomial, data = framingham)
summary(bmi.sex.mortality)
summary(bmi.mortality)
# check if sex is an effect modifier
bmi.sexint.mortality = glm(death~bmi+bmi*sex, family = binomial, data = framingham)
summary(bmi.sexint.mortality)
# check if sex is an effect modifier
bmi.sexint.mortality = glm(death~bmi+bmi*sex, family = binomial, data = framingham)
summary(bmi.sexint.mortality)
# check if sex is a confounder
framingham$sex = framingham$sex -1
bmi.sex.mortality = glm(death~ bmi + sex, family = binomial, data = framingham)
summary(bmi.sex.mortality)
summary(bmi.mortality)
# import and clean dataset
library(haven)
framingham <- read_dta("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming/framingham.dta")
framingham = na.omit(framingham[c('sex', 'bmi', 'age','agecat','death')])
framingham$sex = framingham$sex -1
View(framingham)
# fit logistic regression model -  linear
bmi.mortality = glm(death~bmi, family = binomial(), data = framingham)
summary(bmi.mortality)
# Calculate odds ratio for the effect of a 5-unit change in bmi
odds_ratio = exp(5* 0.050932)
cat("The odds ratio for the effect of a 5-unit change in bmi is",odds_ratio, '\n')
lower_bound = exp(5* (0.050932 - 1.96*0.007686))
upper_bound = exp(5* (0.050932 + 1.96*0.007686))
sprintf("The 95 percent CI of OR for the effect of a 5-unit change in bmi is (%f, %f).", lower_bound, upper_bound)
# fit logistic regression model - linear and quadratic bmi
bmi.quad.mortality = glm(death ~ bmi + I(bmi^2), family = binomial, data = framingham)
summary(bmi.quad.mortality)
anova(bmi.mortality, bmi.quad.mortality, test = 'Chisq')
bmi_range = range(framingham$bmi)
bmi_range
xweight = seq(0,100,0.01)
yweight1 = predict(bmi.mortality,list(bmi = xweight), type = "response")
yweight2 = predict(bmi.quad.mortality, list(bmi = xweight), type = "response")
plot(framingham$death ~ framingham$bmi, col = "black", pch = 20, xlim = c(0,60), main = "Fitted probability curve")
lines(xweight,yweight1, col = "red")
lines(xweight, yweight2, col = "dodgerblue")
legend("bottomright", c("fitted linear logistic regression curve", "fitted quadratic logistic regression curve") ,col = c("red", "dodgerblue") ,lty = "solid", cex = 0.7)
odds = function(bmi){
log_odds = -1.6476413 + 0.0287998 * bmi + 0.0003947 * bmi^2
odds = exp(log_odds)
return (odds)
}
oddsratio1 = odds(25)/odds(20)
oddsratio2 = odds(35)/odds(30)
cat("The odds ratio for a 5-unit increase in BMI (comparing 25 to 20) is:", oddsratio1, '\n')
cat("The odds ratio for a 5-unit increase in BMI (comparing 35 to 30) is:", oddsratio2)
# Two sample t-test comparing the average bmi of males and females
t.test(bmi~sex, data = framingham)
boxplot(bmi~sex, data = framingham)
# check if sex is a confounder
bmi.sex.mortality = glm(death~ bmi + sex, family = binomial, data = framingham)
summary(bmi.sex.mortality)
summary(bmi.mortality)
# check if sex is an effect modifier
bmi.sexint.mortality = glm(death~bmi+bmi*sex, family = binomial, data = framingham)
summary(bmi.sexint.mortality)
age.cont.mortality = glm(death~age, family = binomial, data = framingham)
age.cat.factor.mortality = glm(death~as.factor(agecat), family = binomial, data = framingham)
age.cat.cont.mortality= glm(death~agecat, family = binomial, age = framingham)
age.cont.mortality = glm(death~age, family = binomial, data = framingham)
age.cat.factor.mortality = glm(death~as.factor(agecat), family = binomial, data = framingham)
age.cat.cont.mortality= glm(death~agecat, family = binomial, data = framingham)
summary(age.cont.mortality)
summary(age.cat.factor.mortality)
summary(age.cat.cont.mortality)
anova(age.cat.cont.mortality,age.cat.factor.mortality, test = "Chisq")
#AIC(age.cont.mortality)
#AIC(age.cat.mortality)
#pR2(age.cont.mortality)
#pR2(age.cat.mortality)
anova(age.cat.cont.mortality,age.cat.factor.mortality, test = "Chisq")
AIC(age.cont.mortality)
AIC(age.cat.cont.mortality)
AIC(age.cat.factor.mortality)
#pR2(age.cont.mortality)
#pR2(age.cat.mortality)
anova(age.cat.cont.mortality,age.cat.factor.mortality, test = "Chisq")
AIC(age.cont.mortality)
AIC(age.cat.cont.mortality)
AIC(age.cat.factor.mortality)
pR2(age.cont.mortality)
pR2(age.cat.cont.mortality)
pR2(age.cat.factor.mortality)
age.cont.mortality = glm(death~age, family = binomial, data = framingham)
age.cat.factor.mortality = glm(death~as.factor(agecat), family = binomial, data = framingham)
age.cat.cont.mortality= glm(death~agecat, family = binomial, data = framingham)
anova(age.cat.cont.mortality,age.cat.factor.mortality, test = "Chisq")
AIC(age.cont.mortality)
AIC(age.cat.cont.mortality)
AIC(age.cat.factor.mortality)
pR2(age.cont.mortality)
pR2(age.cat.cont.mortality)
pR2(age.cat.factor.mortality)
anova(age.cat.cont.mortality,age.cat.factor.mortality, test = "Chisq")
AIC(age.cont.mortality)
AIC(age.cat.cont.mortality)
AIC(age.cat.factor.mortality)
BIC(age.cont.mortality)
BIC(age.cat.cont.mortality)
BIC(age.cat.factor.mortality)
pR2(age.cont.mortality)
pR2(age.cat.cont.mortality)
pR2(age.cat.factor.mortality)
hoslem.test(framingham$death,fitted(age.cont.mortality),g=10)
install.packages("pROC")
library(pROC)
hoslem.test(framingham$death,fitted(age.cont.mortality),g=10)
install.packages("ResourceSelection")
install.packages("LogisticDx")
library(ResourceSelection)
library(LogisticDx)
hoslem.test(framingham$death,fitted(age.cont.mortality),g=10)
library(ResourceSelection)
library(LogisticDx)
hoslem.test(framingham$death,fitted(age.cont.mortality),g=10)
chisq.test(framingham$death,fitted(age.cat.cont.mortality))
chisq.test(framingham$death,fitted(age.cat.factor.mortality))
library(ResourceSelection)
library(LogisticDx)
hoslem.test(framingham$death,fitted(age.cont.mortality),g=10)
chisq.test(framingham$death,fitted(age.cat.cont.mortality))
chisq.test(framingham$death,fitted(age.cat.factor.mortality))
library(ResourceSelection)
library(LogisticDx)
fitted.cont.results = ifelse(fitted(age.cont.mortality) > 0.5,1,0)
fitted.cat.cont.results = ifelse(fitted(age.cat.cont.mortality) > 0.5,1,0)
fitted.cat.factor.results = ifelse(fitted(age.cat.factor.mortality) > 0.5,1,0)
hoslem.test(framingham$death,fitted.cont.results,g=10)
chisq.test(framingham$death,fitted.cat.cont.results)
chisq.test(framingham$death,fitted.cat.factor.results)
library(ResourceSelection)
library(LogisticDx)
fitted.cont.results = ifelse(fitted(age.cont.mortality) > 0.5,1,0)
fitted.cat.cont.results = ifelse(fitted(age.cat.cont.mortality) > 0.5,1,0)
fitted.cat.factor.results = ifelse(fitted(age.cat.factor.mortality) > 0.5,1,0)
framingham$death
hoslem.test(framingham$death,fitted.cont.results,g=10)
chisq.test(framingham$death,fitted.cat.cont.results)
chisq.test(framingham$death,fitted.cat.factor.results)
library(ResourceSelection)
library(LogisticDx)
fitted.cont.results = ifelse(fitted(age.cont.mortality) > 0.5,1,0)
fitted.cat.cont.results = ifelse(fitted(age.cat.cont.mortality) > 0.5,1,0)
fitted.cat.factor.results = ifelse(fitted(age.cat.factor.mortality) > 0.5,1,0)
framingham$death - fitted.cont.results
hoslem.test(framingham$death,fitted.cont.results,g=10)
chisq.test(framingham$death,fitted.cat.cont.results)
chisq.test(framingham$death,fitted.cat.factor.results)
library(ResourceSelection)
library(LogisticDx)
fitted.cont.results = ifelse(fitted(age.cont.mortality) > 0.5,1,0)
fitted.cat.cont.results = ifelse(fitted(age.cat.cont.mortality) > 0.5,1,0)
fitted.cat.factor.results = ifelse(fitted(age.cat.factor.mortality) > 0.5,1,0)
hoslem.test(framingham$death,fitted.cont.results,g=10)
chisq.test(framingham$death,fitted.cat.cont.results)
chisq.test(framingham$death,fitted.cat.factor.results)
mod_forw <- step(glm(fracture ~ 1, data = glow, family=binomial), ~fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, direction = "forward")
summary(mod_forw)
install.packages("ResourceSelection")
install.packages("LogisticDx")
library(ResourceSelection)
library(LogisticDx)
# Reading in the Data
glow <- read.csv("glow.csv")
names(glow) <- tolower(names(glow))
#----------------------------------
# Model Building
#----------------------------------
# Running a forward selection procedure (note that this uses AIC)
mod_forw <- step(glm(fracture ~ 1, data = glow, family=binomial), ~fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, direction = "forward")
summary(mod_forw)
# Running a backward selection procedure (using AIC)
full.mod <- glm(fracture ~ fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, data=glow, family=binomial)
mod_back <- step(full.mod, direction = "backward")
summary(mod_back)
# Running a stepwise selection procedure (using AIC)
mod_step <- step(glm(fracture ~ 1, data = glow, family=binomial), ~fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, direction = "both")
summary(mod_step)
# I couldn't immediately find a best subset selection procedure in R: the
# one I was able to identify in Lab 5 relies on the Adjusted R^2 :/
#----------------------------------
# Calibration
#----------------------------------
# Pearson Chi-Square Test
by(cbind(glow$priorfrac, glow$armassist), glow$fracture, FUN=function(x)table(x[,1], x[,2]))
# There doesn't seem to be an easy way to perform a Chi-Square test for
# contingency tables that consider three variables (as we do here: fracture,
# armassist, and priorfrac). You can always compute the statistic by hand
# using the formula seen in class, and then compare that to a chi-square
# distribution with the appropriate degrees of freedom.
install.packages("ResourceSelection")
fitted(mod_forw)
mod_forw <- step(glm(fracture ~ 1, data = glow, family=binomial), ~fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, direction = "forward")
summary(mod_forw)
# Running a backward selection procedure (using AIC)
full.mod <- glm(fracture ~ fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, data=glow, family=binomial)
mod_back <- step(full.mod, direction = "backward")
summary(mod_back)
# Running a stepwise selection procedure (using AIC)
mod_step <- step(glm(fracture ~ 1, data = glow, family=binomial), ~fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, direction = "both")
summary(mod_step)
glow <- read.csv("glow.csv")
names(glow) <- tolower(names(glow))
setwd("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/2019 Labs/Week 8/Data and Programs")
# Reading in the Data
glow <- read.csv("glow.csv")
names(glow) <- tolower(names(glow))
# Running a forward selection procedure (note that this uses AIC)
mod_forw <- step(glm(fracture ~ 1, data = glow, family=binomial), ~fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, direction = "forward")
summary(mod_forw)
# Running a backward selection procedure (using AIC)
full.mod <- glm(fracture ~ fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, data=glow, family=binomial)
mod_back <- step(full.mod, direction = "backward")
summary(mod_back)
# Running a stepwise selection procedure (using AIC)
mod_step <- step(glm(fracture ~ 1, data = glow, family=binomial), ~fracscore+raterisk+smoke+armassist+momfrac+premeno+bmi+height+age+priorfrac, direction = "both")
summary(mod_step)
# Pearson Chi-Square Test
by(cbind(glow$priorfrac, glow$armassist), glow$fracture, FUN=function(x)table(x[,1], x[,2]))
fitted(mod_forw)
# Hosmer-Lemeshow Test for the Forward Selection Model
hoslem.test(glow$fracture,fitted(mod_forw),g=10)
library(ResourceSelection)
library(LogisticDx)
fitted.cont.results = ifelse(fitted(age.cont.mortality) > 0.5,1,0)
fitted.cat.cont.results = ifelse(fitted(age.cat.cont.mortality) > 0.5,1,0)
fitted.cat.factor.results = ifelse(fitted(age.cat.factor.mortality) > 0.5,1,0)
hoslem.test(framingham$death,fitted(age.cont.mortality) ,g=10)
chisq.test(framingham$death,fitted(age.cat.cont.mortality))
chisq.test(framingham$death,fitted(age.cat.factor.mortality))
bmi.agecat.mortality = glm(death~bmi + agecat, family=binomial, data = framingham)
bmi.agecatint.mortality = glm(death ~ bmi + agecat*bmi, family = binomial, data = framingham)
summary(bmi.mortality)
summary(bmi.agecat.mortality)
summary(bmi.agecatint.mortality)
setwd("~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/Homework#5/Data and Programming")
# import and clean dataset
library(haven)
framingham <- read_dta("framingham.dta")
framingham = na.omit(framingham[c('sex', 'bmi', 'age','agecat','death')])
framingham$sex = framingham$sex -1
View(framingham)
# Calculate odds ratio for the effect of a 5-unit change in bmi
odds_ratio = exp(5* 0.050932)
cat("The odds ratio for the effect of a 5-unit change in bmi is",odds_ratio, '\n')
lower_bound = exp(5* (0.050932 - 1.96*0.007686))
upper_bound = exp(5* (0.050932 + 1.96*0.007686))
sprintf("The 95 percent CI of OR for the effect of a 5-unit change in bmi is (%f, %f).",
lower_bound, upper_bound)
